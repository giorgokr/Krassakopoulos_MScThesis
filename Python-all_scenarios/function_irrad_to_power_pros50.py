import pandas as pd
import numpy as np
#import random

# for scenario 1 - with 15 prosumers

def energy_offer(num_days, num_hours, num_seller, panels_num):
    
    # Load the data Series from the Excel files
    #from Archalochori
    ghi_Archal = pd.read_excel('solcast_ghi_Archalochori.xlsx')
    ambTemp_Archal = pd.read_excel('solcast_Air Temp_Archalochori.xlsx')
    #from Archanes
    ghi_Archanes = pd.read_excel('solcast_ghi_Archanes.xlsx')
    ambTemp_Archanes = pd.read_excel('solcast_Air Temp_Archanes.xlsx')
    #from Herakleion
    ghi_Her = pd.read_excel('solcast_ghi_Herakleion.xlsx')
    ambTemp_Her = pd.read_excel('solcast_Air Temp_Herakleion.xlsx')
    #from Nea Arvi
    ghi_NArvi = pd.read_excel('solcast_ghi_Nea_Arvi.xlsx') 
    ambTemp_NArvi = pd.read_excel('solcast_Air Temp_Nea_Arvi.xlsx')

    # Convert the DataFrame column to a NumPy array - make it mix from different locations
    #from Archalochori
    ghi_nparray_Archal = ghi_Archal['Ghi'].values
    ambTemp_nparray_Archal = ambTemp_Archal['AirTemp'].values
    #from Archanes
    ghi_nparray_Archanes = ghi_Archanes['Ghi'].values
    ambTemp_nparray_Archanes = ambTemp_Archanes['AirTemp'].values
    #from Herakleion
    ghi_nparray_Her = ghi_Her['Ghi'].values
    ambTemp_nparray_Her = ambTemp_Her['AirTemp'].values
    #from Nea Arvi
    ghi_nparray_NArvi = ghi_NArvi['Ghi'].values
    ambTemp_nparray_NArvi = ambTemp_NArvi['AirTemp'].values
    
    
    #A_mod = 1.754 * 1.096 # area (m2) of one module of the ones I use
    n_inv = 0.98 #efficiency of inverter
    T_noct = 43 # NOCT temp in deg celcius
    Ta_noct = 20 # ambient NOCT temp in deg celcius
    G_noct = 800 # irradiance in W/m2 under NOCT consitions
    n_e = 0.208 # efficiency of the module 
    ta = 0.9 # τα product, we use standard the value 0.9
    P_stc = 400 # power gen by one module in W, under STC conditions
    G_stc = 1000 # irradiance in W/m2 under STC consitions
    c_temp = - 0.0034 # temp coefficient of Pmax = -0.34% per deg Celcius
    Tc_stc = 25 # cell temp under STC consitions
    # Tc is the PV module (or cell) temperature
    # G is the irradiance GHI in W/m2 at time t one the panel
    
    #Calculate for Archalochori
    G_Archal = ghi_nparray_Archal
    #G = 630
    #G = np.array([630, 1000, 1100])
    
    # Ta is the ambient temprature
    Ta_Archal = ambTemp_nparray_Archal
    #Power generation calculation by each module - by one module in W
    #For the formulas I used Kalogirou, notes L03 from solar course, sources f5 and f6, check also notes on day book
    Tc_Archal = (T_noct - Ta_noct) * (G_Archal/G_noct) * (1 - (n_e/ta)) + Ta_Archal
    P_mod_m2_Archal = P_stc * (G_Archal/G_stc) * (1 + c_temp * (Tc_Archal - Tc_stc)) #power generated per m2 of a module
    #P_mod_Archal = P_mod_m2_Archal * A_mod #power generated by one module
    P_mod_Archal = P_mod_m2_Archal #power generated by one module
    P_gen_Archal = n_inv * P_mod_Archal # power generated after the inverter and its losses
    E_gen_Archal = np.round(P_gen_Archal * 1 / 1000, 6) # energy generated by the P_gen in every hour - energy by one module - kWh = W*h/1000
    #with the np.round it shows up to 6 decimal places max
       
      
    #Calculate for Archanes
    G_Archanes = ghi_nparray_Archanes
    # Ta is the ambient temprature
    Ta_Archanes = ambTemp_nparray_Archanes 
    Tc_Archanes = (T_noct - Ta_noct) * (G_Archanes/G_noct) * (1 - (n_e/ta)) + Ta_Archanes
    P_mod_m2_Archanes = P_stc * (G_Archanes/G_stc) * (1 + c_temp * (Tc_Archanes - Tc_stc)) #power generated per m2 of a module
    #P_mod_Archanes = P_mod_m2_Archanes * A_mod #power generated by one module
    P_mod_Archanes = P_mod_m2_Archanes #power generated by one module
    P_gen_Archanes = n_inv * P_mod_Archanes # power generated after the inverter and its losses
    E_gen_Archanes = np.round(P_gen_Archanes * 1 / 1000, 6) # energy generated by the P_gen in every hour - energy by one module - kWh = W*h/1000
    #with the np.round it shows up to 6 decimal places max
    
    
    #Calculate for Herakleion
    G_Her = ghi_nparray_Her 
    # Ta is the ambient temprature
    Ta_Her = ambTemp_nparray_Her 
    Tc_Her = (T_noct - Ta_noct) * (G_Her/G_noct) * (1 - (n_e/ta)) + Ta_Her
    P_mod_m2_Her = P_stc * (G_Her/G_stc) * (1 + c_temp * (Tc_Her - Tc_stc)) #power generated per m2 of a module
    #P_mod_Her = P_mod_m2_Her * A_mod #power generated by one module
    P_mod_Her = P_mod_m2_Her #power generated by one module
    P_gen_Her = n_inv * P_mod_Her # power generated after the inverter and its losses
    E_gen_Her = np.round(P_gen_Her * 1 / 1000, 6) # energy generated by the P_gen in every hour - energy by one module - kWh = W*h/1000
    #with the np.round it shows up to 6 decimal places max
    
    
    #Calculate for Nea Arvi 
    G_NArvi = ghi_nparray_NArvi
    # Ta is the ambient temprature
    Ta_NArvi = ambTemp_nparray_NArvi 
    Tc_NArvi = (T_noct - Ta_noct) * (G_NArvi/G_noct) * (1 - (n_e/ta)) + Ta_NArvi
    P_mod_m2_NArvi = P_stc * (G_NArvi/G_stc) * (1 + c_temp * (Tc_NArvi - Tc_stc)) #power generated per m2 of a module
    #P_mod_NArvi = P_mod_m2_NArvi * A_mod #power generated by one module
    P_mod_NArvi = P_mod_m2_NArvi #power generated by one module
    P_gen_NArvi = n_inv * P_mod_NArvi # power generated after the inverter and its losses
    E_gen_NArvi = np.round(P_gen_NArvi * 1 / 1000, 6) # energy generated by the P_gen in every hour - energy by one module - kWh = W*h/1000
    #with the np.round it shows up to 6 decimal places max
        
    
    #compute energy generated by each seller ...
    
    
    # vector with sellers' energy generation in each hour
    #energy_gen = [[[0 for _ in range(num_seller)] for _ in range(num_hours)] for _ in range(num_days)]
    energy_gen = np.zeros((num_days, num_hours, num_seller)) 
     
       
    # Iterate over each day, hour, and agent, and update seller_bidQuantity with E_gen values and panels_num
    #it computes the total energy bidded by each seller
    #index = 0
    index_Archal = 0
    index_Archanes = 0
    index_Her = 0
    index_NArvi = 0
    for day in range(num_days):
        for hour in range(num_hours): 
            #for agent_s in range(num_seller):
            for agent_s in range(0, 12): # from 0 to 11, to make it put pros of the same region by 5 in "energy_gen" 
                energy_gen[day, hour, agent_s] = (E_gen_Archal[index_Archal] * panels_num[agent_s])
            index_Archal += 1
            for agent_s in range(12, 24): # from 12 to 23
                energy_gen[day, hour, agent_s] = (E_gen_Archanes[index_Archanes] * panels_num[agent_s])
            index_Archanes += 1
            for agent_s in range(24, 36): # from 24 to 35
                energy_gen[day, hour, agent_s] = (E_gen_Her[index_Her] * panels_num[agent_s])
            index_Her += 1
            for agent_s in range(36, 50): # from 36 to 49
                energy_gen[day, hour, agent_s] = (E_gen_NArvi[index_NArvi] * panels_num[agent_s])
            index_NArvi += 1
                
    return energy_gen, E_gen_Archal, E_gen_Archanes, E_gen_Her, E_gen_NArvi
   

           


